import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;

public class ProdutosDAO {

    private Connection conn;

    public ProdutosDAO() {
        // Tenta estabelecer a conex√£o ao criar uma inst√¢ncia de ProdutosDAO
        conectaDAO objConectaDAO = new conectaDAO();
        this.conn = objConectaDAO.connectDB();

        // **ADICIONE ESTA VERIFICA√á√ÉO INICIAL**
        if (this.conn == null) {
            System.err.println("Falha ao inicializar ProdutosDAO: Conex√£o com o banco de dados √© nula.");
            // Opcional: Lan√ßar uma RuntimeException se a conex√£o for cr√≠tica para a opera√ß√£o
            // throw new RuntimeException("N√£o foi poss√≠vel conectar ao banco de dados.");
        }
    }

    public void cadastrarProduto(ProdutosDTO produto) {
        // Verifique a conex√£o antes de qualquer opera√ß√£o de banco de dados
        if (this.conn == null) {
            JOptionPane.showMessageDialog(null, "Erro: N√£o foi poss√≠vel conectar ao banco de dados para cadastrar o produto.");
            System.err.println("Tentativa de cadastrar produto com conex√£o nula.");
            return; // Sai do m√©todo se a conex√£o for nula
        }

        String sql = "INSERT INTO produtos (nome, valor, status) VALUES (?, ?, ?)";
        try (PreparedStatement pstm = this.conn.prepareStatement(sql)) {
            pstm.setString(1, produto.getNome());
            pstm.setDouble(2, produto.getValor()); // Altere para setDouble se for double/float
            pstm.setString(3, produto.getStatus());

            int rowsAffected = pstm.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Produto cadastrado com sucesso! ‚úÖ");
            } else {
                JOptionPane.showMessageDialog(null, "Falha ao cadastrar o produto. Nenhuma linha afetada.");
            }
	    
	    
	    

        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "Erro ao inserir o Produto: " + erro.getMessage());
            System.err.println("Erro SQL ao cadastrar produto: " + erro.getMessage());
            erro.printStackTrace(); // Para ver o stack trace completo no console
        } finally {
            // Idealmente, a conex√£o deveria ser fechada em um local apropriado,
            // ou gerenciada por um pool de conex√µes em aplica√ß√µes maiores.
            // Para um app simples, pode fechar aqui se a conex√£o for √∫nica para cada opera√ß√£o.
            // No entanto, se 'conn' for uma vari√°vel de inst√¢ncia, geralmente √© melhor
            // fechar a conex√£o quando a aplica√ß√£o estiver sendo encerrada.
            // Cuidado ao fechar a conex√£o aqui se ela for reutilizada por outros m√©todos DAO!
        }
    }

    // M√©todo para fechar a conex√£o quando o DAO n√£o for mais necess√°rio
    public void closeConnection() {
        if (this.conn != null) {
            try {
                this.conn.close();
                System.out.println("Conex√£o com o banco de dados fechada. üîí");
            } catch (SQLException e) {
                System.err.println("Erro ao fechar a conex√£o: " + e.getMessage());
            }
        }
    }
}